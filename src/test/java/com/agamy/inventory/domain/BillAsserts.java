package com.agamy.inventory.domain;

import static com.agamy.inventory.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BillAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillAllPropertiesEquals(Bill expected, Bill actual) {
        assertBillAutoGeneratedPropertiesEquals(expected, actual);
        assertBillAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillAllUpdatablePropertiesEquals(Bill expected, Bill actual) {
        assertBillUpdatableFieldsEquals(expected, actual);
        assertBillUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillAutoGeneratedPropertiesEquals(Bill expected, Bill actual) {
        assertThat(actual)
            .as("Verify Bill auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillUpdatableFieldsEquals(Bill expected, Bill actual) {
        assertThat(actual)
            .as("Verify Bill relevant properties")
            .satisfies(a -> assertThat(a.getBillNumber()).as("check billNumber").isEqualTo(expected.getBillNumber()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()))
            .satisfies(a ->
                assertThat(a.getTotalAmount())
                    .as("check totalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmount())
            )
            .satisfies(a ->
                assertThat(a.getTaxAmount()).as("check taxAmount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTaxAmount())
            )
            .satisfies(a ->
                assertThat(a.getDiscountAmount())
                    .as("check discountAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDiscountAmount())
            )
            .satisfies(a ->
                assertThat(a.getPaidAmount())
                    .as("check paidAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPaidAmount())
            )
            .satisfies(a ->
                assertThat(a.getDueAmount()).as("check dueAmount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getDueAmount())
            )
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillUpdatableRelationshipsEquals(Bill expected, Bill actual) {
        // empty method
    }
}
