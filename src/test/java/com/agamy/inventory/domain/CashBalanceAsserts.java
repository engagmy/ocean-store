package com.agamy.inventory.domain;

import static com.agamy.inventory.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CashBalanceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCashBalanceAllPropertiesEquals(CashBalance expected, CashBalance actual) {
        assertCashBalanceAutoGeneratedPropertiesEquals(expected, actual);
        assertCashBalanceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCashBalanceAllUpdatablePropertiesEquals(CashBalance expected, CashBalance actual) {
        assertCashBalanceUpdatableFieldsEquals(expected, actual);
        assertCashBalanceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCashBalanceAutoGeneratedPropertiesEquals(CashBalance expected, CashBalance actual) {
        assertThat(actual)
            .as("Verify CashBalance auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCashBalanceUpdatableFieldsEquals(CashBalance expected, CashBalance actual) {
        assertThat(actual)
            .as("Verify CashBalance relevant properties")
            .satisfies(a ->
                assertThat(a.getAvailable()).as("check available").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAvailable())
            )
            .satisfies(a -> assertThat(a.getLastUpdated()).as("check lastUpdated").isEqualTo(expected.getLastUpdated()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCashBalanceUpdatableRelationshipsEquals(CashBalance expected, CashBalance actual) {
        // empty method
    }
}
