package com.agamy.inventory.domain;

import static com.agamy.inventory.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DailyCashDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDailyCashDetailAllPropertiesEquals(DailyCashDetail expected, DailyCashDetail actual) {
        assertDailyCashDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertDailyCashDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDailyCashDetailAllUpdatablePropertiesEquals(DailyCashDetail expected, DailyCashDetail actual) {
        assertDailyCashDetailUpdatableFieldsEquals(expected, actual);
        assertDailyCashDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDailyCashDetailAutoGeneratedPropertiesEquals(DailyCashDetail expected, DailyCashDetail actual) {
        assertThat(actual)
            .as("Verify DailyCashDetail auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDailyCashDetailUpdatableFieldsEquals(DailyCashDetail expected, DailyCashDetail actual) {
        assertThat(actual)
            .as("Verify DailyCashDetail relevant properties")
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getReferenceId()).as("check referenceId").isEqualTo(expected.getReferenceId()))
            .satisfies(a -> assertThat(a.getReferenceType()).as("check referenceType").isEqualTo(expected.getReferenceType()))
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getTimestamp()).as("check timestamp").isEqualTo(expected.getTimestamp()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDailyCashDetailUpdatableRelationshipsEquals(DailyCashDetail expected, DailyCashDetail actual) {
        assertThat(actual)
            .as("Verify DailyCashDetail relationships")
            .satisfies(a ->
                assertThat(a.getDailyCashReconciliation())
                    .as("check dailyCashReconciliation")
                    .isEqualTo(expected.getDailyCashReconciliation())
            );
    }
}
