package com.agamy.inventory.domain;

import static com.agamy.inventory.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DailyCashReconciliationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDailyCashReconciliationAllPropertiesEquals(DailyCashReconciliation expected, DailyCashReconciliation actual) {
        assertDailyCashReconciliationAutoGeneratedPropertiesEquals(expected, actual);
        assertDailyCashReconciliationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDailyCashReconciliationAllUpdatablePropertiesEquals(
        DailyCashReconciliation expected,
        DailyCashReconciliation actual
    ) {
        assertDailyCashReconciliationUpdatableFieldsEquals(expected, actual);
        assertDailyCashReconciliationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDailyCashReconciliationAutoGeneratedPropertiesEquals(
        DailyCashReconciliation expected,
        DailyCashReconciliation actual
    ) {
        assertThat(actual)
            .as("Verify DailyCashReconciliation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDailyCashReconciliationUpdatableFieldsEquals(
        DailyCashReconciliation expected,
        DailyCashReconciliation actual
    ) {
        assertThat(actual)
            .as("Verify DailyCashReconciliation relevant properties")
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()))
            .satisfies(a ->
                assertThat(a.getOpeningBalance())
                    .as("check openingBalance")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getOpeningBalance())
            )
            .satisfies(a ->
                assertThat(a.getTotalSales())
                    .as("check totalSales")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalSales())
            )
            .satisfies(a ->
                assertThat(a.getTotalPurchases())
                    .as("check totalPurchases")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalPurchases())
            )
            .satisfies(a ->
                assertThat(a.getTotalSalaryPaid())
                    .as("check totalSalaryPaid")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalSalaryPaid())
            )
            .satisfies(a ->
                assertThat(a.getOwnerDeposits())
                    .as("check ownerDeposits")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getOwnerDeposits())
            )
            .satisfies(a ->
                assertThat(a.getWithdrawals())
                    .as("check withdrawals")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getWithdrawals())
            )
            .satisfies(a ->
                assertThat(a.getClosingBalance())
                    .as("check closingBalance")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getClosingBalance())
            )
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDailyCashReconciliationUpdatableRelationshipsEquals(
        DailyCashReconciliation expected,
        DailyCashReconciliation actual
    ) {
        // empty method
    }
}
