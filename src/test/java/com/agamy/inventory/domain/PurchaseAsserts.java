package com.agamy.inventory.domain;

import static com.agamy.inventory.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PurchaseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseAllPropertiesEquals(Purchase expected, Purchase actual) {
        assertPurchaseAutoGeneratedPropertiesEquals(expected, actual);
        assertPurchaseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseAllUpdatablePropertiesEquals(Purchase expected, Purchase actual) {
        assertPurchaseUpdatableFieldsEquals(expected, actual);
        assertPurchaseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseAutoGeneratedPropertiesEquals(Purchase expected, Purchase actual) {
        assertThat(actual)
            .as("Verify Purchase auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseUpdatableFieldsEquals(Purchase expected, Purchase actual) {
        assertThat(actual)
            .as("Verify Purchase relevant properties")
            .satisfies(a -> assertThat(a.getProductName()).as("check productName").isEqualTo(expected.getProductName()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a ->
                assertThat(a.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitPrice())
            )
            .satisfies(a ->
                assertThat(a.getLineTotal()).as("check lineTotal").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getLineTotal())
            )
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseUpdatableRelationshipsEquals(Purchase expected, Purchase actual) {
        assertThat(actual)
            .as("Verify Purchase relationships")
            .satisfies(a -> assertThat(a.getPurchaseOperation()).as("check purchaseOperation").isEqualTo(expected.getPurchaseOperation()))
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()))
            .satisfies(a -> assertThat(a.getSupplier()).as("check supplier").isEqualTo(expected.getSupplier()));
    }
}
