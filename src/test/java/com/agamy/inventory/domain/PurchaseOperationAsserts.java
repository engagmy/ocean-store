package com.agamy.inventory.domain;

import static com.agamy.inventory.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PurchaseOperationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOperationAllPropertiesEquals(PurchaseOperation expected, PurchaseOperation actual) {
        assertPurchaseOperationAutoGeneratedPropertiesEquals(expected, actual);
        assertPurchaseOperationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOperationAllUpdatablePropertiesEquals(PurchaseOperation expected, PurchaseOperation actual) {
        assertPurchaseOperationUpdatableFieldsEquals(expected, actual);
        assertPurchaseOperationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOperationAutoGeneratedPropertiesEquals(PurchaseOperation expected, PurchaseOperation actual) {
        assertThat(actual)
            .as("Verify PurchaseOperation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOperationUpdatableFieldsEquals(PurchaseOperation expected, PurchaseOperation actual) {
        assertThat(actual)
            .as("Verify PurchaseOperation relevant properties")
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()))
            .satisfies(a -> assertThat(a.getSupplierInvoiceNo()).as("check supplierInvoiceNo").isEqualTo(expected.getSupplierInvoiceNo()))
            .satisfies(a -> assertThat(a.getTotalQuantity()).as("check totalQuantity").isEqualTo(expected.getTotalQuantity()))
            .satisfies(a ->
                assertThat(a.getTotalAmount())
                    .as("check totalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmount())
            )
            .satisfies(a ->
                assertThat(a.getGrandTotal())
                    .as("check grandTotal")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getGrandTotal())
            )
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchaseOperationUpdatableRelationshipsEquals(PurchaseOperation expected, PurchaseOperation actual) {
        assertThat(actual)
            .as("Verify PurchaseOperation relationships")
            .satisfies(a -> assertThat(a.getBill()).as("check bill").isEqualTo(expected.getBill()));
    }
}
