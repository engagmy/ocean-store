package com.agamy.inventory.domain;

import static com.agamy.inventory.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PurchasePaymentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchasePaymentAllPropertiesEquals(PurchasePayment expected, PurchasePayment actual) {
        assertPurchasePaymentAutoGeneratedPropertiesEquals(expected, actual);
        assertPurchasePaymentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchasePaymentAllUpdatablePropertiesEquals(PurchasePayment expected, PurchasePayment actual) {
        assertPurchasePaymentUpdatableFieldsEquals(expected, actual);
        assertPurchasePaymentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchasePaymentAutoGeneratedPropertiesEquals(PurchasePayment expected, PurchasePayment actual) {
        assertThat(actual)
            .as("Verify PurchasePayment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchasePaymentUpdatableFieldsEquals(PurchasePayment expected, PurchasePayment actual) {
        assertThat(actual)
            .as("Verify PurchasePayment relevant properties")
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()))
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPurchasePaymentUpdatableRelationshipsEquals(PurchasePayment expected, PurchasePayment actual) {
        assertThat(actual)
            .as("Verify PurchasePayment relationships")
            .satisfies(a -> assertThat(a.getPurchase()).as("check purchase").isEqualTo(expected.getPurchase()));
    }
}
