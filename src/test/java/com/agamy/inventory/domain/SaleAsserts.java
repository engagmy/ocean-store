package com.agamy.inventory.domain;

import static com.agamy.inventory.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SaleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleAllPropertiesEquals(Sale expected, Sale actual) {
        assertSaleAutoGeneratedPropertiesEquals(expected, actual);
        assertSaleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleAllUpdatablePropertiesEquals(Sale expected, Sale actual) {
        assertSaleUpdatableFieldsEquals(expected, actual);
        assertSaleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleAutoGeneratedPropertiesEquals(Sale expected, Sale actual) {
        assertThat(actual)
            .as("Verify Sale auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleUpdatableFieldsEquals(Sale expected, Sale actual) {
        assertThat(actual)
            .as("Verify Sale relevant properties")
            .satisfies(a -> assertThat(a.getProductName()).as("check productName").isEqualTo(expected.getProductName()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a ->
                assertThat(a.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitPrice())
            )
            .satisfies(a ->
                assertThat(a.getDiscount()).as("check discount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getDiscount())
            )
            .satisfies(a ->
                assertThat(a.getLineTotal()).as("check lineTotal").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getLineTotal())
            )
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleUpdatableRelationshipsEquals(Sale expected, Sale actual) {
        assertThat(actual)
            .as("Verify Sale relationships")
            .satisfies(a -> assertThat(a.getSaleOperation()).as("check saleOperation").isEqualTo(expected.getSaleOperation()))
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()));
    }
}
