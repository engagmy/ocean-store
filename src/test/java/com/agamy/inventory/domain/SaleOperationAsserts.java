package com.agamy.inventory.domain;

import static com.agamy.inventory.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SaleOperationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOperationAllPropertiesEquals(SaleOperation expected, SaleOperation actual) {
        assertSaleOperationAutoGeneratedPropertiesEquals(expected, actual);
        assertSaleOperationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOperationAllUpdatablePropertiesEquals(SaleOperation expected, SaleOperation actual) {
        assertSaleOperationUpdatableFieldsEquals(expected, actual);
        assertSaleOperationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOperationAutoGeneratedPropertiesEquals(SaleOperation expected, SaleOperation actual) {
        assertThat(actual)
            .as("Verify SaleOperation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOperationUpdatableFieldsEquals(SaleOperation expected, SaleOperation actual) {
        assertThat(actual)
            .as("Verify SaleOperation relevant properties")
            .satisfies(a -> assertThat(a.getDate()).as("check date").isEqualTo(expected.getDate()))
            .satisfies(a -> assertThat(a.getTotalQuantity()).as("check totalQuantity").isEqualTo(expected.getTotalQuantity()))
            .satisfies(a ->
                assertThat(a.getTotalAmount())
                    .as("check totalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmount())
            )
            .satisfies(a ->
                assertThat(a.getTotalDiscount())
                    .as("check totalDiscount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalDiscount())
            )
            .satisfies(a ->
                assertThat(a.getGrandTotal())
                    .as("check grandTotal")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getGrandTotal())
            )
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleOperationUpdatableRelationshipsEquals(SaleOperation expected, SaleOperation actual) {
        assertThat(actual)
            .as("Verify SaleOperation relationships")
            .satisfies(a -> assertThat(a.getBill()).as("check bill").isEqualTo(expected.getBill()))
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()));
    }
}
